package main

import (
	"fmt"
	"os/exec"
	"testing"
)

func TestConnectToRouter11(t *testing.T) {
	// Command to list available containers
	psCommand := "sudo docker ps"

	// Execute the command to list available containers
	psOutput, err := exec.Command("sh", "-c", psCommand).Output()
	if err != nil {
		fmt.Println("Error executing docker ps command:", err)
		return
	}

	// Print the output of the docker ps command
	fmt.Println("Available containers:")
	fmt.Println(string(psOutput))

	// Command to log in to bash shell of the container
	loginCommand := "sudo docker exec clab-frrlab-router1 /bin/bash"

	// Execute the command to log in to the bash shell of the container
	loginOutput, err := exec.Command("sh", "-c", loginCommand).CombinedOutput()
	if err != nil {
		fmt.Println("Error logging in to the container:", err)
		return
	}

	// Print the output of the login command
	fmt.Println("Login output:")
	fmt.Println(string(loginOutput))

	// Command to log in to vtysh
	vtyshCommand := "vtysh"

	// Execute the command to log in to vtysh within the container's environment
	vtyshOutput, err := exec.Command("sh", "-c", loginCommand+" -c '"+vtyshCommand+"'").CombinedOutput()
	if err != nil {
		fmt.Println("Error logging in to vtysh:", err)
		return
	}

	// Print the output of the vtysh command
	fmt.Println("vtysh output:")
	fmt.Println(string(vtyshOutput))

	// Command to log in to configure mode
	configCommand := "configure terminal"

	// Execute the command to log in to configure mode within the container's environment
	configOutput, err := exec.Command("sh", "-c", loginCommand+" -c '"+configCommand+"'").CombinedOutput()
	if err != nil {
		fmt.Println("Error logging in to configure mode:", err)
		return
	}

	// Print the output of the configure mode command
	fmt.Println("Configure mode output:")
	fmt.Println(string(configOutput))

	// Command to log in to OSPF mode
	ospfCommand := "router ospf"

	// Execute the command to log in to OSPF mode within the container's environment
	ospfOutput, err := exec.Command("sh", "-c", loginCommand+" -c '"+configCommand+" ; "+ospfCommand+"'").CombinedOutput()
	if err != nil {
		fmt.Println("Error logging in to OSPF mode:", err)
		return
	}

	// Print the output of the OSPF mode command
	fmt.Println("OSPF mode output:")
	fmt.Println(string(ospfOutput))

	// Command to configure network 192.168.1.0/24 area 0
	networkCommand := "network 192.168.1.0/24 area 0"

	// Execute the command to configure network 192.168.1.0/24 area 0 within the container's environment
	networkOutput, err := exec.Command("sh", "-c", loginCommand+" -c '"+configCommand+" ; "+ospfCommand+" ; "+networkCommand+"'").CombinedOutput()
	if err != nil {
		fmt.Println("Error configuring network:", err)
		return
	}

	// Print the output of the network configuration command
	fmt.Println("Network configuration output:")
	fmt.Println(string(networkOutput))
}
