package main

import (
	"fmt"
	"os/exec"
	"testing"
)

func TestConnectToRouter11(t *testing.T) {
	// Command to list available containers
	psCommand := "sudo docker ps"

	// Execute the command to list available containers
	psOutput, err := exec.Command("sh", "-c", psCommand).Output()
	if err != nil {
		t.Fatalf("Error executing docker ps command: %v", err)
	}

	// Print the output of the docker ps command
	fmt.Println("Available containers:")
	fmt.Println(string(psOutput))

	// Command to log in to bash shell of the container
	loginCommand := "sudo docker exec clab-frrlab-router1 /bin/bash"

	// Execute the command to log in to the bash shell of the container
	loginOutput, err := exec.Command("sh", "-c", loginCommand).CombinedOutput()
	if err != nil {
		t.Fatalf("Error logging in to the container: %v", err)
	}

	// Print the output of the login command
	fmt.Println("Login output:")
	fmt.Println(string(loginOutput))

	// Command to enter configuration mode and configure OSPF
	configCommands := `
	configure terminal
	router ospf
	network 192.168.1.0/24 area 0
	end
	`

	// Execute the command to configure OSPF network within the container's environment
	configOutput, err := exec.Command("sh", "-c", loginCommand+" -c '"+configCommands+"'").CombinedOutput()
	if err != nil {
		t.Fatalf("Error configuring OSPF network: %v", err)
	}

	// Print the output of the configuration commands
	fmt.Println("Configuration output:")
	fmt.Println(string(configOutput))

	// Command to show OSPF neighbors
	showNeighborsCommand := "/usr/bin/vtysh -c 'show ip ospf neighbor'"

	// Execute the command to show OSPF neighbors within the container's environment
	showNeighborsOutput, err := exec.Command("sh", "-c", loginCommand+" -c '"+showNeighborsCommand+"'").CombinedOutput()
	if err != nil {
		t.Fatalf("Error showing OSPF neighbors: %v", err)
	}

	// Print the output of the show OSPF neighbors command
	fmt.Println("OSPF neighbors output:")
	fmt.Println(string(showNeighborsOutput))
}
