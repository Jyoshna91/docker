package main

import (
	"fmt"
	"os/exec"
	"testing"
)

func TestConnectToRouter11(t *testing.T) {
	// Command to list available containers
	psCommand := "sudo docker ps"

	// Execute the command to list available containers
	psOutput, err := exec.Command("sh", "-c", psCommand).Output()
	if err != nil {
		t.Fatalf("Error executing docker ps command: %v", err)
	}

	// Print the output of the docker ps command
	fmt.Println("Available containers:")
	fmt.Println(string(psOutput))

	// Command to log in to vtysh
	vtyshCommand := "vtysh"

	// Execute the command to log in to vtysh within the container's environment
	vtyshOutput, err := exec.Command("sudo", "docker", "exec", "-it", "clab-frrlab-router1", vtyshCommand).CombinedOutput()
	if err != nil {
		t.Fatalf("Error logging in to vtysh: %v", err)
	}

	// Print the output of the vtysh command
	fmt.Println("vtysh output:")
	fmt.Println(string(vtyshOutput))

	// Command to log in to config mode
	configCommand := "configure terminal"

	// Execute the command to log in to config mode within the container's environment
	configOutput, err := exec.Command("sudo", "docker", "exec", "-it", "clab-frrlab-router1", configCommand).CombinedOutput()
	if err != nil {
		t.Fatalf("Error logging in to config mode: %v", err)
	}

	// Print the output of the config mode command
	fmt.Println("Config mode output:")
	fmt.Println(string(configOutput))

	// Command to log in to OSPF mode
	ospfCommand := "router ospf"

	// Execute the command to log in to OSPF mode within the container's environment
	ospfOutput, err := exec.Command("sudo", "docker", "exec", "-it", "clab-frrlab-router1", configCommand, ospfCommand).CombinedOutput()
	if err != nil {
		t.Fatalf("Error logging in to OSPF mode: %v", err)
	}

	// Print the output of the OSPF mode command
	fmt.Println("OSPF mode output:")
	fmt.Println(string(ospfOutput))

	// Command to configure network 192.168.1.0/24 area 0
	networkCommand := "network 192.168.1.0/24 area 0"

	// Execute the command to configure network 192.168.1.0/24 area 0 within the container's environment
	networkOutput, err := exec.Command("sudo", "docker", "exec", "-it", "clab-frrlab-router1", configCommand, ospfCommand, networkCommand).CombinedOutput()
	if err != nil {
		t.Fatalf("Error configuring network: %v", err)
	}

	// Print the output of the network configuration command
	fmt.Println("Network configuration output:")
	fmt.Println(string(networkOutput))
}
